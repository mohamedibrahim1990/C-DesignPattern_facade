#include <iostream>
#include <vector>
#include <optional>
//facade design pattern 
class IBuffer{};
struct TableBuffer:IBuffer{
    struct TableColumnSpec;
    TableBuffer(std::vector<TableColumSpec> spec, int totalHeight){}

    struct TableColumnSpec
    {
        std::string header;
        int width;
        enum class TableColumnAlignment{
            left, Center, Right
        }alignment;
    }   
};

struct Console{
    std::vector<ViewPort*> viewports;
    Size charSize, gridSize;
};

Console::Console(bool fullscreen , int char_width, int char_height, int width, int height
,std::optional<Size> client_size)
{
    //single buffer and viewport created here
    //linked together and added to appropriate collections 
    //image textures generated
    //grid size calculated depending on whether we want fullscreen mode
}

Console::Console(const ConsoleCreationParameters& ccp){}

struct ConsleCreationParameters{
    std::optional<Size> client_size;
    int character_width{10};
    int character_height{14};
    int width{20};
    int height{30};
    bool fullscreen{false};
    bool create_default_view_and_buffer{true};
};

int main(){
    
}
